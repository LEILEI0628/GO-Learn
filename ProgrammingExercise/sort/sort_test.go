package sort

import (
	"testing"
)

func TestSort(t *testing.T) {
	arr := []int{64, 34, 25, 12, 22, 11, 90}
	t.Log("Original array:", arr)

	//算法特点总结：
	//冒泡排序：稳定排序；适合小规模数据或基本有序的数据；优化后可提前终止排序
	//选择排序：不稳定排序；交换次数最少（O(n)次）；适合数据量小且交换成本高的场景
	//插入排序：稳定排序；对几乎有序的数据效率很高；常用于小规模数据排序（如快速排序的优化）
	//快速排序：不稳定排序；平均性能最好；需要合理选择基准值（这里选中间值）；递归实现需要栈空间
	//归并排序：稳定排序；需要额外O(n)空间；适合链表排序和外排序；保证O(n log n)时间复杂度

	//性能比较：
	//小数据量（n ≤ 1000）：插入排序通常更快
	//中等数据量（n ≤ 10000）：快速排序表现最好
	//大数据量（n > 10000）：归并排序更稳定
	//内存受限时：堆排序更好（未实现）
	//可以根据具体场景选择合适的排序算法，实际应用中通常会结合多种排序算法（如TimSort结合归并排序和插入排序）。

	// 测试不同排序算法
	//BubbleSort(arr)
	//SelectSort(arr)
	// InsertionSort(arr)
	arr = QuickSort(arr)
	//arr = MergeSort(arr)

	t.Log("Sorted array:  ", arr)
}
