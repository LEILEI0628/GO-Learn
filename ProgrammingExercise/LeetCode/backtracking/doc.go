package backtracking

// 回溯算法基于递归函数，是一种纯暴力搜索，常用于解决：
// 1.组合问题 例：某些数字有哪些组合方式（强调无序）
// 2.排列问题 例：求一个集合的所有排列方式（强调有序）
// 3.切割问题 例：某个字符串可以如何切割
// 4.子集问题 例：求一个集合的所有子集
// 5.棋盘问题 例：N皇后、解数独

// 回溯法通常可以抽象为一个N叉树（宽度为集合大小，使用for循环遍历；深度使用递归处理）
// 一般返回值为void，一般在终止条件（叶子结点）收集结果（子集问题等除外）
// 处理完成（终止条件）后一般加入单层搜索的逻辑。一般情况下是一个for循环，遍历集合的每个元素，
// for循环中为处理节点逻辑、递归函数、回溯操作（用于撤销处理节点）
// 回溯算法模板
//func backtracking(参数) {
//	if (终止条件) {
//		存放结果
//		return
//	}
//	for (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) {
//		处理节点
//		backtracking(路径，选择列表) // 递归
//		回溯，撤销处理结果
//	}
//}
